//version 2021/02/08 12:00
//Se corrigió el bug cuando aparecía una nueva vela
//Se almacenan todas las lineas para luego poder eliminarla en una nueva vela	



//@version=4
study("Divergencia_Principal", overlay= true, max_bars_back=1000 )
long = input(50,  title= "Longitud EMA")

// arrays para mantener los puntos maximos y minimos de cada zona
var activo_puntos_maximos_x = array.new_int()
var activo_puntos_maximos_y = array.new_float()
var activo_puntos_minimos_x = array.new_int()
var activo_puntos_minimos_y = array.new_float()
var rsi_puntos_maximos_y = array.new_float()
var rsi_puntos_minimos_y = array.new_float()

var lineas = array.new_line()
borrar_lineas() =>
    c = array.size(lineas)
    if c > 0 
        for r = 0 to c -1
            line.delete(array.get(lineas,r) )
        array.clear(lineas)

// calculos para obtener la ema y la distancia hasta la ema
ema = ema(close, long)
dist = abs(close - ema)
porcentaje = dist * 100 / close
mm_porcentaje = ema(porcentaje, 21 )

// calculo para obtener el RSI
rsi = rsi(close, 14)


// inicialización de las variables para mantener los maximos y minimos por zona
activo_ultimo_maximo_x = 0
activo_ultimo_maximo_y = 0.0
rsi_ultimo_maximo_y    = 0.0

activo_ultimo_minimo_x = 0
activo_ultimo_minimo_y = 99999999999999.9
rsi_ultimo_minimo_y    = 0.0



// inicializamos las variables para saber si tenemos que buscar maximos o minimos
buscando_maximos = ema  > ema[1]  and close > ema
buscando_minimos = ema  < ema[1]  and close < ema

// en la última vela
if barstate.islast
    array.clear(activo_puntos_maximos_x)
    array.clear(activo_puntos_maximos_y)
    array.clear(activo_puntos_minimos_x)
    array.clear(activo_puntos_minimos_y)
    array.clear(rsi_puntos_maximos_y)
    array.clear(rsi_puntos_minimos_y)
    for pos = 0 to 900
        if buscando_maximos
            if close[pos] > ema[pos] and porcentaje[pos] > mm_porcentaje[pos]       // si se sigue cumpliendo la condicion de buscar maximos
                if close[pos] > activo_ultimo_maximo_y                              // si encontramos un nuevo maximo
                    // mantenemos el nuevo maximo
                    activo_ultimo_maximo_y := close[pos]
                    activo_ultimo_maximo_x := time[pos]
                    rsi_ultimo_maximo_y    := rsi[pos]
                    

            if ema[pos] < ema[pos +1] and close[pos] < ema[pos]                     // si la condicion ya no se cumple, debemos comenzar a buscar minimos
                if activo_ultimo_maximo_x > 0
                    // agregamos el último maximo al array de maximos
                    array.push(activo_puntos_maximos_x, activo_ultimo_maximo_x)
                    array.push(activo_puntos_maximos_y, activo_ultimo_maximo_y)
                    array.push(rsi_puntos_maximos_y, rsi_ultimo_maximo_y)

                // inicializamos las variables para la proxima vez que tengamos que buscar nuevos maximos
                activo_ultimo_maximo_x := 0
                activo_ultimo_maximo_y := 0.0
                rsi_ultimo_maximo_y    := 0.0
                
                //  establecemos que ahora necesitamos buscar nuevos minimos
                buscando_maximos := false
                buscando_minimos := true
                    
        if buscando_minimos
            if close[pos] < ema[pos] and porcentaje[pos] > mm_porcentaje[pos]       // si se sigue cumpliendo la condición de buscar nuevos minimos
                if close[pos] < activo_ultimo_minimo_y                              // si encontramos u nuevo minimo
                    // mantenemos el nuevo minimo
                    activo_ultimo_minimo_y := close[pos]
                    activo_ultimo_minimo_x := time[pos]
                    rsi_ultimo_minimo_y    := rsi[pos]
                    
            if ema[pos] > ema[pos +1] and close[pos] > ema[pos]                     // si la condicion ya no se cumple, debemos comenzar a buscar maximos
                if activo_ultimo_minimo_x > 0
                    // agregamos el último minimo al array de minimos
                    array.push(activo_puntos_minimos_x, activo_ultimo_minimo_x)
                    array.push(activo_puntos_minimos_y, activo_ultimo_minimo_y)
                    array.push(rsi_puntos_minimos_y, rsi_ultimo_minimo_y)

                // inicializamos las variables para la proxima vez que tengamos que buscar nuevos minimos
                activo_ultimo_minimo_x := 0
                activo_ultimo_minimo_y := 99999999999999.9
                rsi_ultimo_minimo_y    := 99999999999999.9

                // establecemos que ahora necesitamos buscar nuevmos maximos
                buscando_maximos := true
                buscando_minimos := false        
    
    // recorremos todo los puntos maximos para unirlos con una linea si es que cumplen con la condición de divergencia
    for r = 0 to array.size(activo_puntos_maximos_x) - 2
        ax1 = array.get(activo_puntos_maximos_x, r )
        ay1 = array.get(activo_puntos_maximos_y, r )
        ax2 = array.get(activo_puntos_maximos_x, r+1 )
        ay2 = array.get(activo_puntos_maximos_y, r+1 )
        
        ry1 = array.get(rsi_puntos_maximos_y, r )
        ry2 = array.get(rsi_puntos_maximos_y, r+1 )

        l = line.new(ax1, ay1, ax2, ay2, xloc=xloc.bar_time, color =  (ay1  > ay2 and ry1 < ry2) ?  color.red : na   ,width = 3  )
        array.push(lineas,l)

    // recorremos todo los puntos minimos para unirlos con una linea si es que cumplen con la condición de divergencia
    for r = 0 to array.size(activo_puntos_minimos_x) - 2
        ax1 = array.get(activo_puntos_minimos_x, r )
        ay1 = array.get(activo_puntos_minimos_y, r )
        ax2 = array.get(activo_puntos_minimos_x, r+1 )
        ay2 = array.get(activo_puntos_minimos_y, r+1 )
        
        ry1 = array.get(rsi_puntos_minimos_y, r )
        ry2 = array.get(rsi_puntos_minimos_y, r+1 )
        
        l = line.new(ax1, ay1, ax2, ay2, xloc=xloc.bar_time, color =  (ay1  < ay2 and ry1 > ry2) ?  color.red : na   ,width = 3   )
        array.push(lineas,l)    

// dibujamos la ema junto al grafico principal
plot(ema, color=color.yellow)